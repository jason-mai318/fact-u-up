{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["unirest","require","apikey","process","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","current","target","value","setYear","preventDefault","state","year","alert","func","resText","resYear","req","query","fragment","json","headers","x-rapidapi-host","x-rapidapi-key","end","res","body","text","number","history","concat","toConsumableArray","usedYear","learnButtonVisible","console","log","link","theHistory","map","items","index","react_default","a","createElement","key","className","id","href","rel","onChange","name","type","placeholder","onClick","style","visibility","reverse","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.00269837.chunk.js","sourcesContent":["\nimport React, { Component } from 'react';\nimport './App.css';\nvar unirest = require(\"unirest\");\nconst apikey = process.env.REACT_APP_API_KEY;\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      year: 'Enter a year to get started!',\n      current: '',\n      usedYear: '',\n      text: \"Click the button to generate a random info from that year!\",\n      learnButtonVisible: 'hidden',\n      history:[],\n    }\n  }\n\n  handleChange = event => {\n    this.setState({\n      current: event.target.value\n    })\n  };\n\n  setYear = event => {\n    event.preventDefault();\n    if (this.state.current > 0 && this.state.current <= 2019) {\n      this.setState({\n        year: this.state.current,\n        current: '',\n      })\n    }\n    else {\n      alert(\"Please enter a year between 1 and 2019!\")\n    }\n  }\n\n  func = () => {\n    var req = unirest(\"GET\", \"https://numbersapi.p.rapidapi.com/\" + this.state.year + \"/year\");\n    var resText, resYear;\n    req.query({\n      \"fragment\": \"false\",\n      \"json\": \"true\"\n    });\n\n    req.headers({\n      \"x-rapidapi-host\": \"numbersapi.p.rapidapi.com\",\n      \"x-rapidapi-key\": apikey\n    });\n\n    req.end((res) => {\n      resText = res.body.text;\n      resYear = res.body.number;\n      if(this.state.text!==\"Click the button to generate a random info from that year!\"){\n        this.setState({\n          history: [...this.state.history, this.state.usedYear+\", \"+this.state.text],\n        })\n      }\n      this.setState({\n        text: resText,\n        usedYear: resYear,\n        learnButtonVisible: 'visible',\n      })\n    });\n    console.log(\"line 33\", this.state.history);\n  }\n  render() {\n    var link = \"https://www.google.com/search?q=\" + this.state.usedYear + \" \" + this.state.text;\n    const theHistory = this.state.history.map((items, index) => \n      <span key={index} className=\"listItem\">\n        <a id=\"learnMoreButton\" href={\"https://www.google.com/search?q=\"+ items} rel=\"noopener noreferrer\" target=\"_blank\">Learn More</a>\n        <span className=\"taskText\"><b>{index+1}: </b>{items}</span>\n      </span>);\n    return (\n      <div className=\"container\">\n        <div className=\"content\">\n          <div className=\"yearDisp\">\n            <div id='yearText'>{this.state.year}</div>\n            <form>\n              <input onChange={this.handleChange} id=\"yearInputBox\" name=\"yearInput\" type=\"number\" placeholder=\"Set the year here\" value={this.state.current}></input>\n              <button type=\"submit\" id=\"setYear\" onClick={this.setYear}>Set</button>\n            </form>\n          </div>\n          <div className=\"outputWindow\">\n            <button id='factButton' onClick={this.func}>Get Fact'd</button>\n            <div id=\"factDisplay\">{this.state.text}</div>\n            </div>\n            <a style={{visibility:this.state.learnButtonVisible}} id=\"mainLearnMoreButton\" href={link} rel=\"noopener noreferrer\" target=\"_blank\">Learn More About This</a>\n          \n          <div id=\"historyListTitle\"><b>Previous Results</b></div>\n          <div className=\"theList\">\n            {theHistory.reverse()}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}